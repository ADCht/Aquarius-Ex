#ifndef CMDINFO_H_
#define CMDINFO_H_

#include "lib2.h"
#include "arginfo.h"

#ifndef __E_STATIC_LIB

static CMD_INFO s_CmdInfo[] = {
//****** 文本向量->构造函数（成员）	** 0
	{
/*ccname*/	_WT("构造函数"),
/*egname*/	_WT("consturct"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_CONSTURCT_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 文本向量->析构函数（成员）	** 1
	{
/*ccname*/	_WT("析构函数"),
/*egname*/	_WT("free"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_FREE_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 文本向量->复制函数（成员）	** 2
	{
/*ccname*/	_WT("复制函数"),
/*egname*/	_WT("copy"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_COPY_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 文本向量->添加（成员）	** 3
	{
/*ccname*/	_WT("添加"),
/*egname*/	_WT("append"),
/*explain*/	_WT("执行该方法将添加一个文本型数据到向量中。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	s_ArgInfo,
	},
//****** 文本向量->替换（成员）	** 4
	{
/*ccname*/	_WT("替换"),
/*egname*/	_WT("replace"),
/*explain*/	_WT("执行该方法将替换|索引|所关联的文本型数据。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/2,
/*arg lp*/	&s_ArgInfo[1],
	},
//****** 文本向量->删除（成员）	** 5
	{
/*ccname*/	_WT("删除"),
/*egname*/	_WT("remove"),
/*explain*/	_WT("执行该方法将删除索引值所指向的文本数据。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[1],
	},
//****** 文本向量->清空（成员）	** 6
	{
/*ccname*/	_WT("清空"),
/*egname*/	_WT("clear"),
/*explain*/	_WT("执行该方法将清空向量内的所有数据。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 文本向量->取边界（成员）	** 7
	{
/*ccname*/	_WT("取集合大小"),
/*egname*/	_WT("getbound"),
/*explain*/	_WT("执行该方法将可以获得向量的边界大小(成员数量)。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_INT,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 文本向量->取内容（成员）	** 8
	{
/*ccname*/	_WT("取集合值"),
/*egname*/	_WT("getelement"),
/*explain*/	_WT("执行该方法将可以获得向量中索引值所关联的文本数据。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_TEXT,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[1],
	},
//****** 长整数向量->构造函数（成员）	** 9
	{
/*ccname*/	_WT("构造函数"),
/*egname*/	_WT("consturct"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_CONSTURCT_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 长整数向量->析构函数（成员）	** 10
	{
/*ccname*/	_WT("析构函数"),
/*egname*/	_WT("free"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_FREE_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 长整数向量->复制函数（成员）	** 11
	{
/*ccname*/	_WT("复制函数"),
/*egname*/	_WT("copy"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_COPY_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 长整数向量->添加（成员）	** 12
	{
/*ccname*/	_WT("添加"),
/*egname*/	_WT("append"),
/*explain*/	_WT("执行该方法将添加一个长整数型数据到向量中。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[3],
	},
//****** 长整数向量->替换（成员）	** 13
	{
/*ccname*/	_WT("替换"),
/*egname*/	_WT("replace"),
/*explain*/	_WT("执行该方法将替换|索引|所关联的长整数型数据。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/2,
/*arg lp*/	&s_ArgInfo[4],
	},
//****** 长整数向量->删除（成员）	** 14
	{
/*ccname*/	_WT("删除"),
/*egname*/	_WT("remove"),
/*explain*/	_WT("执行该方法将删除索引值所指向的长整数数据。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[4],
	},
//****** 长整数向量->清空（成员）	** 15
	{
/*ccname*/	_WT("清空"),
/*egname*/	_WT("clear"),
/*explain*/	_WT("执行该方法将清空向量内的所有数据。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 长整数向量->取边界（成员）	** 16
	{
/*ccname*/	_WT("取集合大小"),
/*egname*/	_WT("getbound"),
/*explain*/	_WT("执行该方法将可以获得向量的边界大小(成员数量)。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_INT,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 长整数向量->取内容（成员）	** 17
	{
/*ccname*/	_WT("取集合值"),
/*egname*/	_WT("getelement"),
/*explain*/	_WT("执行该方法将可以获得向量中索引值所关联的长整数数据。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_INT64,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[4],
	},
//****** 适配器->释放浏览器	** 18
	{
/*ccname*/	_WT("释放组件"),
/*egname*/	_WT("quitprocess"),
/*explain*/	_WT("释放浏览器所使用的系统资源,在关闭程序时调用。"),
/*category*/0,
/*state*/	NULL,
/*ret*/		NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 文本字典->构造函数（成员）	** 19
	{
/*ccname*/	_WT("构造函数"),
/*egname*/	_WT("consturct"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_CONSTURCT_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 文本字典->析构函数（成员）	** 20
	{
/*ccname*/	_WT("析构函数"),
/*egname*/	_WT("free"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_FREE_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 文本字典->复制函数（成员）	** 21
	{
/*ccname*/	_WT("复制函数"),
/*egname*/	_WT("copy"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_COPY_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 文本字典->插入（成员）	** 22
	{
/*ccname*/	_WT("插入表项"),
/*egname*/	_WT("insert"),
/*explain*/	_WT("插入一对键值数据到文本字典中。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/2,
/*arg lp*/	&s_ArgInfo[7],
	},
//****** 文本字典->查找（成员）	** 23
	{
/*ccname*/	_WT("查找表项"),
/*egname*/	_WT("find"),
/*explain*/	_WT("查找键名所关联的键值数据,如果键名不存在则返回\"\""),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_TEXT,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[9],
	},
//****** 文本字典->取边界（成员）	** 24
	{
/*ccname*/	_WT("取表项数"),
/*egname*/	_WT("getbound"),
/*explain*/	_WT("获取文本字典对象的边界大小(成员数量)。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_INT,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 文本字典->取首个成员（成员）	** 25
	{
/*ccname*/	_WT("取首个表项"),
/*egname*/	_WT("getfirst"),
/*explain*/	_WT("获取文本字典中首个成员的位置指针,如果字典对象为空将返回0"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_INT,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 文本字典->取首个成员（成员）	** 26
	{
/*ccname*/	_WT("取下一个表项"),
/*egname*/	_WT("getnext"),
/*explain*/	_WT("获取文本字典中下个成员的位置指针,如果已到达最后一个成员将返回假,否则返回真"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_BOOL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[10],
	},
//****** 文本字典->擦除（成员）	** 27
	{
/*ccname*/	_WT("擦除表项"),
/*egname*/	_WT("erase"),
/*explain*/	_WT("当不再需要使用成员位置指针时,可调用本命令将成员位置指针数据擦除,以释放资源"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_BOOL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[10],
	},
//****** 文本字典->取键名（成员）	** 28
	{
/*ccname*/	_WT("取表项键名"),
/*egname*/	_WT("getkey"),
/*explain*/	_WT("获取成员指针中的键名数据。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_TEXT,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[10],
	},
//****** 文本字典->取键值（成员）	** 29
	{
/*ccname*/	_WT("取表项键值"),
/*egname*/	_WT("getvalue"),
/*explain*/	_WT("获取成员指针中的键值数据。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_TEXT,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[10],
	},
//****** 文本字典->删除（成员）	** 30
	{
/*ccname*/	_WT("删除表项"),
/*egname*/	_WT("remove"),
/*explain*/	_WT("删除键名所关联的键值数据。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[11],
	},
//****** 文本字典->删除（成员）	** 31
	{
/*ccname*/	_WT("清空"),
/*egname*/	_WT("clear"),
/*explain*/	_WT("清空字典中的所有键值数据。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 文本字典增强版->构造函数（成员）	** 32
	{
/*ccname*/	_WT("构造函数"),
/*egname*/	_WT("consturct"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_CONSTURCT_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 文本字典增强版->析构函数（成员）	** 33
	{
/*ccname*/	_WT("析构函数"),
/*egname*/	_WT("free"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_FREE_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 文本字典增强版->复制函数（成员）	** 34
	{
/*ccname*/	_WT("复制函数"),
/*egname*/	_WT("copy"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_COPY_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 文本字典增强版->插入（成员）	** 35
	{
/*ccname*/	_WT("插入表项"),
/*egname*/	_WT("insert"),
/*explain*/	_WT("插入一对键值数据到文本字典中。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/2,
/*arg lp*/	&s_ArgInfo[12],
	},
//****** 文本字典增强版->查找（成员）	** 36
	{
/*ccname*/	_WT("查找表项"),
/*egname*/	_WT("find"),
/*explain*/	_WT("查找键名所关联的键值数据,如果键名不存在则返回\"\""),
/*category*/-1,
/*state*/	NULL,
/*ret*/		MAKELONG(2,0),
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/2,
/*arg lp*/	&s_ArgInfo[87],
	},
//****** 文本字典增强版->取边界（成员）	** 37
	{
/*ccname*/	_WT("取表项数"),
/*egname*/	_WT("getbound"),
/*explain*/	_WT("获取文本字典对象的边界大小(成员数量)。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_INT,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 文本字典增强版->取首个成员（成员）	** 38
	{
/*ccname*/	_WT("取首个表项"),
/*egname*/	_WT("getfirst"),
/*explain*/	_WT("获取文本字典中首个成员的位置指针,如果字典对象为空将返回0"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_INT,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 文本字典增强版->取首个成员（成员）	** 39
	{
/*ccname*/	_WT("取下一个表项"),
/*egname*/	_WT("getnext"),
/*explain*/	_WT("获取文本字典中下个成员的位置指针,如果已到达最后一个成员将返回假,否则返回真"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_BOOL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[15],
	},
//****** 文本字典增强版->擦除（成员）	** 40
	{
/*ccname*/	_WT("擦除表项"),
/*egname*/	_WT("erase"),
/*explain*/	_WT("当不再需要使用成员位置指针时,可调用本命令将成员位置指针数据擦除,以释放资源"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_BOOL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[15],
	},
//****** 文本字典增强版->取键名（成员）	** 41
	{
/*ccname*/	_WT("取表项键名"),
/*egname*/	_WT("getkey"),
/*explain*/	_WT("获取成员指针中的键名数据。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_TEXT,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[15],
	},
//****** 文本字典增强版->取键值（成员）	** 42
	{
/*ccname*/	_WT("取表项键值"),
/*egname*/	_WT("getvalue"),
/*explain*/	_WT("获取成员指针中的键值数据。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_TEXT,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[15],
	},
//****** 文本字典增强版->删除（成员）	** 43
	{
/*ccname*/	_WT("删除表项"),
/*egname*/	_WT("remove"),
/*explain*/	_WT("删除键名所关联的键值数据。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[16],
	},
//****** 文本字典增强版->删除（成员）	** 44
	{
/*ccname*/	_WT("清空"),
/*egname*/	_WT("clear"),
/*explain*/	_WT("清空字典中的所有键值数据。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 窗口设置->构造函数（成员）	** 45
	{
/*ccname*/	_WT("构造函数"),
/*egname*/	_WT("consturct"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_CONSTURCT_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 窗口设置->析构函数（成员）	** 46
	{
/*ccname*/	_WT("析构函数"),
/*egname*/	_WT("free"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_FREE_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 窗口设置->复制函数（成员）	** 47
	{
/*ccname*/	_WT("复制函数"),
/*egname*/	_WT("copy"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_COPY_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 窗口设置->创建浏览器作为子窗口（成员）	** 48
	{
/*ccname*/	_WT("创建浏览器作为控件"),
/*egname*/	_WT("SetAsChild"),
/*explain*/	_WT("将浏览器创建为一个可嵌入到应用程序中的子窗口。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/5,
/*arg lp*/	&s_ArgInfo[17],
	},
//****** 窗口设置->创建浏览器作为弹出窗口（成员）	** 49
	{
/*ccname*/	_WT("创建浏览器作为对话框"),
/*egname*/	_WT("SetAsPopup"),
/*explain*/	_WT("将浏览器创建为一个独立的弹出式窗口。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/2,
/*arg lp*/	&s_ArgInfo[22],
	},
//****** 窗口设置->创建离屏浏览器（成员）	** 50
	{
/*ccname*/	_WT("创建离屏浏览器"),
/*egname*/	_WT("SetAsWindowless"),
/*explain*/	_WT("创建一个没有窗口的(离屏)渲染浏览器,所有的渲染都将通过CefRenderHandler接口进行处理。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[22],
	},
//****** 窗口设置->调整风格样式（成员）	** 51
	{
/*ccname*/	_WT("修改样式"),
/*egname*/	_WT("ModifyStyle"),
/*explain*/	_WT("重新调整窗口的样式风格。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/2,
/*arg lp*/	&s_ArgInfo[24],
	},
//****** >HTTP环境设置-构造函数（成员）	** 52
	{
/*ccname*/	_WT("构造函数"),
/*egname*/	_WT("consturct"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_CONSTURCT_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** HTTP环境设置->析构函数（成员）	** 53
	{
/*ccname*/	_WT("析构函数"),
/*egname*/	_WT("free"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_FREE_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** HTTP环境设置->复制函数（成员）	** 54
	{
/*ccname*/	_WT("复制函数"),
/*egname*/	_WT("copy"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_COPY_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** HTTP环境设置->缓存路径（成员）	** 55
	{
/*ccname*/	_WT("缓存路径"),
/*egname*/	_WT("cachepath"),
/*explain*/	_WT("指定存放缓存数据在磁盘上的存储位置。如果为空的话浏览器将使用内置缓存(\"隐身模式\"),"
				"并且不会把数据保存到磁盘上。HTML5 database 以及 localStorage 这些数据只会在"
				"缓存路径存在的情况下持续存在于指定会话中。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[26],
	},
//****** HTTP环境设置->保持会话（成员）	** 56
	{
/*ccname*/	_WT("保持会话"),
/*egname*/	_WT("persistsessioncookies"),
/*explain*/	_WT("保持会话cookie(没有到期或有效的cookie间隔)默认情况下使用全局cookie管理器,将此值设置为真。"
				"通常情况下会话cookie是临时的,而且大部分的web浏览器都不会持续它们。在|缓存路径|中也必须是指定启用"
				"此功能。也可以使用\"persist-session-cokies\"命令行开关进行配置。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[27],
	},
//****** HTTP环境设置->保存用户首选项（成员）	** 57
	{
/*ccname*/	_WT("保存用户首选项"),
/*egname*/	_WT("persistUserpreferences"),
/*explain*/	_WT("如果设置为TRUE,将用户首选项保存为缓存路径目中集中的JSON文件,即使配置了|缓存路径|也必须"
				"是指定启用此功能。也可以使用\"persist-user-preferences\"命令行开关,进行配置。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[27],
	},
//****** HTTP环境设置->忽略SSL证书错误（成员）	** 58
	{
/*ccname*/	_WT("忽略SSL证书错误"),
/*egname*/	_WT("ignorecertificateerrors"),
/*explain*/	_WT("设置为真忽略与SSL证书相关的错误,启用此设置可能会导致潜在的安全漏洞,如\"中间人\"攻击"
				",从互联网家族内容的应用程序不应启用此设置,也可以使用\"ignore-certificate-errors\"命令行开关进行配置。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[27],
	},
//****** 适配器->初始化环境配置	** 59 //废弃函数
	{
/*ccname*/	_WT("初始化环境配置"),
/*egname*/	_WT("initsettings"),
/*explain*/	_WT("浏览器初始化方法,在此方法中可以进行一些初始化设置,它们将适用于所有浏览器,更多的设置参数可以通过命令行进行配置。"),
/*category*/ -1,
/*state*/	CT_IS_HIDED,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[31],
	},
//****** 水星命令行->构造函数（成员）	** 60
	{
/*ccname*/	_WT("构造函数"),
/*egname*/	_WT("consturct"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_CONSTURCT_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星命令行->析构函数（成员）	** 61
	{
/*ccname*/	_WT("析构函数"),
/*egname*/	_WT("free"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_FREE_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星命令行->复制函数（成员）	** 62
	{
/*ccname*/	_WT("复制函数"),
/*egname*/	_WT("copy"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_COPY_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星命令行->从指针初始化（成员）	** 63
	{
/*ccname*/	_WT("从指针初始化"),
/*egname*/	_WT("attach"),
/*explain*/	_WT("从|源对象|中创建一个新的副本对象(引用模式),需要注意的是对新副本对象的修改也将会同步至|源对象|中。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[32],
	},
//****** 水星命令行->是否有效（成员）	** 64
	{
/*ccname*/	_WT("是否有效"),
/*egname*/	_WT("IsValid"),
/*explain*/	_WT("如果此对象有效，则返回真。 如果此函数返回假，则不要调用任何其他方法。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_BOOL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星命令行->是否可写（成员）	** 65
	{
/*ccname*/	_WT("是否可写"),
/*egname*/	_WT("IsReadOnly"),
/*explain*/	_WT("如果此对象的值是只读的，则返回假。 一些API可能会公开只读对象。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_BOOL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星命令行->是否存在（成员）	** 66
	{
/*ccname*/	_WT("是否有配置项"),
/*egname*/	_WT("HasSwitches"),
/*explain*/	_WT("如果命令行有配置项，则返回真。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_BOOL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星命令行->是否存在指定项（成员）	** 67
	{
/*ccname*/	_WT("是否存在指定项"),
/*egname*/	_WT("HasSwitchA"),
/*explain*/	_WT("如果命令行包含给定的配置项，则返回真。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_BOOL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[33],
	},
//****** 水星命令行->是否存在指定项（成员）	** 68
	{
/*ccname*/	_WT("取项值"),
/*egname*/	_WT("GetSwitchValueA"),
/*explain*/	_WT("返回与给定开关关联的值。 如果开关没有值或不存在，则此方法返回空字符串。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_TEXT,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[33],
	},
//****** 水星命令行->取所有项（成员）	** 69
	{
/*ccname*/	_WT("取所有项"),
/*egname*/	_WT("GetSwitches"),
/*explain*/	_WT("返回开关名称和值的映射。 如果一个开关没有值，则返回一个空字符串。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		MAKELONG(4,0),
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星命令行->置空项（成员）	** 70
	{
/*ccname*/	_WT("置空项"),
/*egname*/	_WT("AppendSwitchA"),
/*explain*/	_WT("将一个配置项添加到命令行的末尾。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[33],
	},
//****** 水星命令行->置项值（成员）	** 71
	{
/*ccname*/	_WT("置项值"),
/*egname*/	_WT("AppendSwitchWithValueA"),
/*explain*/	_WT("将具有指定值的配置项添加到命令行的末尾。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/2,
/*arg lp*/	&s_ArgInfo[33],
	},
//****** 水星命令行->取原始命令行字符串（成员）	** 72
	{
/*ccname*/	_WT("取原始命令行字符串"),
/*egname*/	_WT("GetCommandLineStringA"),
/*explain*/	_WT("构造并返回表示的命令行字符串。 谨慎使用此方法，因为报价行为不清楚。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_TEXT,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星命令行->从全局初始化（成员）	** 73
	{
/*ccname*/	_WT("从全局初始化"),
/*egname*/	_WT("GetGlobalCommandLine"),
/*explain*/	_WT("返回单例全局CefCommandLine对象。 返回的对象将是只读的。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星命令行->从字符串初始化（成员）	** 74
	{
/*ccname*/	_WT("从字符串初始化"),
/*egname*/	_WT("InitFromStringA"),
/*explain*/	_WT("用通过调用GetCommandLineA（）返回的字符串初始化命令行。 此方法仅在Windows上受支持。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[35],
	},
//****** 水星领航员->创建浏览器（成员）	** 75
	{
/*ccname*/	_WT("创建浏览器"),
/*egname*/	_WT("createbrowser"),
/*explain*/	_WT("使用提供的参数信息创建一个新的浏览器,如果没有错误将返回真但并不意味着该项操作已经完成"
		",领航员将会在后台完成创建工作后调用创建完毕事件以反馈执行结果。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_BOOL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/2,
/*arg lp*/	&s_ArgInfo[36],
	},
//****** 水星领航员->查询浏览器（成员）	** 76
	{
/*ccname*/	_WT("查询浏览器"),
/*egname*/	_WT("querybrowser"),
/*explain*/	_WT("查询浏览器标识符所关联的实例对象,如果找不到实例对象,将会返回一个空的实例对象,可使用对象方法是否有效()检查该实例对象是否可访问。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		MAKELONG(10,0),
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[39],
	},
//****** 水星浏览器->构造函数（成员）	** 77
	{
/*ccname*/	_WT("构造函数"),
/*egname*/	_WT("consturct"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_CONSTURCT_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星浏览器->析构函数（成员）	** 78
	{
/*ccname*/	_WT("析构函数"),
/*egname*/	_WT("free"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_FREE_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星浏览器->复制函数（成员）	** 79
	{
/*ccname*/	_WT("复制函数"),
/*egname*/	_WT("copy"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_COPY_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星浏览器->是否有效（成员）	** 80
	{
/*ccname*/	_WT("是否有效"),
/*egname*/	_WT("isvalid"),
/*explain*/	_WT("如果这个实例对象不为空且可访问将返回真,否则返回假"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_BOOL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星浏览器->取窗口对象（成员）	** 81
	{
/*ccname*/	_WT("取后台"),
/*egname*/	_WT("gethost"),
/*explain*/	_WT("返回浏览器窗口对象。 此方法只能在浏览器进程中调用。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		MAKELONG(11,0),
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星浏览器->可否后退（成员）	** 82
	{
/*ccname*/	_WT("可否后退"),
/*egname*/	_WT("cangoback"),
/*explain*/	_WT("如果浏览器可以向后导航，则返回真。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_BOOL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星浏览器->后退（成员）	** 83
	{
/*ccname*/	_WT("后退"),
/*egname*/	_WT("goback"),
/*explain*/	_WT("向后导航。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星浏览器->可否前进（成员）	** 84
	{
/*ccname*/	_WT("可否前进"),
/*egname*/	_WT("cangoforward"),
/*explain*/	_WT("如果浏览器可以向前导航，则返回真。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_BOOL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星浏览器->前进（成员）	** 85
	{
/*ccname*/	_WT("前进"),
/*egname*/	_WT("goforward"),
/*explain*/	_WT("向前导航。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星浏览器->是否已就绪（成员）	** 86
	{
/*ccname*/	_WT("是否已就绪"),
/*egname*/	_WT("isready"),
/*explain*/	_WT("如果浏览器已加载完成，则返回真。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_BOOL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星浏览器->重新载入（成员）	** 87
	{
/*ccname*/	_WT("重新载入"),
/*egname*/	_WT("reload"),
/*explain*/	_WT("重新加载当前页面。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星浏览器->重新载入_忽略缓存（成员）	** 88
	{
/*ccname*/	_WT("重新载入_忽略缓存"),
/*egname*/	_WT("reloadignorecache"),
/*explain*/	_WT("重新加载当前页面，忽略任何缓存的数据。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星浏览器->停止加载（成员）	** 89
	{
/*ccname*/	_WT("停止加载"),
/*egname*/	_WT("stopload"),
/*explain*/	_WT("停止加载页面。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星浏览器->取TabID（成员）	** 90
	{
/*ccname*/	_WT("取TAP_ID"),
/*egname*/	_WT("gettabid"),
/*explain*/	_WT("返回此浏览器的全局唯一标识符,用作扩展API的tabId。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_INT64,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星浏览器->是否为Popup窗口（成员）	** 91
	{
/*ccname*/	_WT("是否为POPUP窗口"),
/*egname*/	_WT("ispopup"),
/*explain*/	_WT("如果窗口是一个弹出窗口，则返回真。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_BOOL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星浏览器->是否有文档对象（成员）	** 92
	{
/*ccname*/	_WT("是否有文档"),
/*egname*/	_WT("hasdocument"),
/*explain*/	_WT("如果文档已被加载到浏览器中，则返回真。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_BOOL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星浏览器->取顶层框架（成员）	** 93
	{
/*ccname*/	_WT("取顶层框架"),
/*egname*/	_WT("getmainframe"),
/*explain*/	_WT("返回浏览器窗口的主（顶级）框架。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		MAKELONG(12,0),
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星浏览器->取焦点框架（成员）	** 94
	{
/*ccname*/	_WT("取焦点框架"),
/*egname*/	_WT("getfocusframe"),
/*explain*/	_WT("返回浏览器窗口的焦点框架。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		MAKELONG(12,0),
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星浏览器->从标识符取框架（成员）	** 95
	{
/*ccname*/	_WT("从标识符取框架"),
/*egname*/	_WT("getframefromid"),
/*explain*/	_WT("返回具有指定标识符的Frame，如果未找到，则返回NULL。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		MAKELONG(12,0),
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[40],
	},
//****** 水星浏览器->从名称取框架（成员）	** 96
	{
/*ccname*/	_WT("从名称取框架"),
/*egname*/	_WT("getframefromid"),
/*explain*/	_WT("返回具有指定名称的Frame，如果未找到，则返回NULL。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		MAKELONG(12,0),
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[41],
	},
//****** 水星浏览器->取框架数量（成员）	** 97
	{
/*ccname*/	_WT("取框架数量"),
/*egname*/	_WT("getframecount"),
/*explain*/	_WT("返回当前存在的frame数。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_INT,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星浏览器->取所有框架标识符（成员）	** 98
	{
/*ccname*/	_WT("取所有框架标识符"),
/*egname*/	_WT("getframeidentifiers"),
/*explain*/	_WT("返回所有现有Frame的标识符。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		MAKELONG(3,0),
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星浏览器->取所有框架名称（成员）	** 99
	{
/*ccname*/	_WT("取所有框架名称"),
/*egname*/	_WT("getframenames"),
/*explain*/	_WT("返回所有现有Frame的名称。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		MAKELONG(2,0),
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星窗口->构造函数（成员）	** 100
	{
/*ccname*/	_WT("构造函数"),
/*egname*/	_WT("consturct"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_CONSTURCT_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星窗口->析构函数（成员）	** 101
	{
/*ccname*/	_WT("析构函数"),
/*egname*/	_WT("free"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_FREE_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星窗口->复制函数（成员）	** 102
	{
/*ccname*/	_WT("复制函数"),
/*egname*/	_WT("copy"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_COPY_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星窗口->是否有效（成员）	** 103
	{
/*ccname*/	_WT("是否有效"),
/*egname*/	_WT("isvalid"),
/*explain*/	_WT("如果这个实例对象不为空且可访问将返回真,否则返回假。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_BOOL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星窗口->取浏览器对象（成员）	** 104
	{
/*ccname*/	_WT("取浏览器"),
/*egname*/	_WT("getbrowser"),
/*explain*/	_WT("返回托管浏览器对象。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		MAKELONG(10,0),
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星窗口->关闭浏览器（成员）	** 105
	{
/*ccname*/	_WT("关闭浏览器"),
/*egname*/	_WT("closebrowser"),
/*explain*/	_WT("向浏览器提交一个关闭请求JavaScript'onbeforeunload'事件将会被触发,|强制关闭|为假"
				"时，事件处理器(如果有的话)将会允许提示用户是否选择取消关闭,如果|强制关闭|为真将不会显示提示"
				"信息并关闭。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[42],
	},
//****** 水星窗口->尝试关闭浏览器（成员）	** 106
	{
/*ccname*/	_WT("尝试关闭浏览器"),
/*egname*/	_WT("tryclosebrowser"),
/*explain*/	_WT("向浏览器提交一个关闭请求,内部调用CloseBrowser（false）。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星窗口->设置焦点（成员）	** 107
	{
/*ccname*/	_WT("设置焦点"),
/*egname*/	_WT("setfocus"),
/*explain*/	_WT("设置浏览器是否给与焦点。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[43],
	},
//****** 水星窗口->取窗口句柄（成员）	** 108
	{
/*ccname*/	_WT("取窗口句柄"),
/*egname*/	_WT("getwindowhandle"),
/*explain*/	_WT("获取浏览器的对象实例标识符(窗口句柄),非领航员的窗口句柄。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_INT,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星窗口->取缩放比例（成员）	** 109
	{
/*ccname*/	_WT("取缩放比例"),
/*egname*/	_WT("getzoomlevel"),
/*explain*/	_WT("获取当前缩放级别。默认缩放级别为0.0。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_DOUBLE,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星窗口->置缩放比例（成员）	** 110
	{
/*ccname*/	_WT("置缩放比例"),
/*egname*/	_WT("setzoomlevel"),
/*explain*/	_WT("将缩放级别更改为指定值。指定0.0以重置缩放级别，如果在UI线程上调用，则会应用更改立即，否则，更改将被异步应用于UI线程。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[44],
	},
//****** 水星窗口->文件下载（成员）	** 111
	{
/*ccname*/	_WT("文件下载"),
/*egname*/	_WT("startdownload"),
/*explain*/	_WT("使用CefDownloadHandler在 | url | 下载文件。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[45],
	},
//****** 水星窗口->打印（成员）	** 112
	{
/*ccname*/	_WT("打印"),
/*egname*/	_WT("print"),
/*explain*/	_WT("打印当前的浏览器内容。。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星窗口->打开开发者工具（成员）	** 113
	{
/*ccname*/	_WT("打开开发者工具"),
/*egname*/	_WT("showdevtools"),
/*explain*/	_WT("在自己的浏览器中打开开发工具（DevTools），DevTools浏览器"
				"将继续与这个浏览器相关联，如果DevTools浏览器是"
				"已经打开，那么它将被聚焦，在这种情况下| windowInfo |，"
				"如果 | 元素位置 | 非空，那么指定（x，y）位置的元素将会是检查。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/3,
/*arg lp*/	&s_ArgInfo[46],
	},
//****** 水星窗口->关闭开发者工具（成员）	** 114
	{
/*ccname*/	_WT("关闭开发者工具"),
/*egname*/	_WT("closedevtools"),
/*explain*/	_WT("明确关闭相关的DevTools浏览器（如果有的话）。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星窗口->是否已打开开发者工具（成员）	** 115
	{
/*ccname*/	_WT("是否已打开开发者工具"),
/*egname*/	_WT("hasdevtools"),
/*explain*/	_WT("如果此浏览器当前具有关联的DevTools浏览器，则返回真。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_BOOL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星窗口->禁止更改光标（成员）	** 116
	{
/*ccname*/	_WT("禁止更改光标"),
/*egname*/	_WT("setmousecursorchangedisabled"),
/*explain*/	_WT("设置或鼠标光标更改被禁用。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[49],
	},
//****** 水星窗口->光标更改是否被禁用（成员）	** 117
	{
/*ccname*/	_WT("光标更改是否被禁用"),
/*egname*/	_WT("ismousecursorchangedisabled"),
/*explain*/	_WT("如果禁用鼠标光标更改，则返回真。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_BOOL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星窗口->窗口渲染是否被禁用（成员）	** 118
	{
/*ccname*/	_WT("窗口渲染是否被禁用"),
/*egname*/	_WT("iswindowrenderingdisabled"),
/*explain*/	_WT("如果禁用窗口渲染，则返回真。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_BOOL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星窗口->通知浏览器尺寸已更改（成员）	** 119
	{
/*ccname*/	_WT("通知浏览器尺寸已更改"),
/*egname*/	_WT("wasresized"),
/*explain*/	_WT("通知浏览器小部件已被调整大小，浏览器首先调用CefRenderHandler :: GetViewRect获取新的大小然后"
				"调用CefRenderHandler :: OnPaint与更新区域异步方法仅在禁用窗口渲染时使用。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星窗口->通知浏览器可见状态被更改（成员）	** 120
	{
/*ccname*/	_WT("通知浏览器可见状态已更改"),
/*egname*/	_WT("washidden"),
/*explain*/	_WT("通知浏览器它已被隐藏或显示"
				"CefRenderHandler :: OnPaint通知将在浏览器停止时停止hidden。这个方法只在禁用窗口渲染时使用。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[50],
	},
//****** 水星窗口->通知浏览器屏幕信息已更改（成员）	** 121
	{
/*ccname*/	_WT("通知浏览器屏幕信息已更改"),
/*egname*/	_WT("notifyscreeninfochanged"),
/*explain*/	_WT("向浏览器发送屏幕信息已更改的通知。"
				"浏览器会调用CefRenderHandler :: GetScreenInfo来更新使用这个新值来显示信息。这模拟移动webview。"
				"从一个显示窗口到另一个显示窗口，或者改变窗口的属性当前显示，该方法仅在窗口渲染时使用禁用。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星窗口->发送焦点事件（成员）	** 122
	{
/*ccname*/	_WT("发送焦点事件"),
/*egname*/	_WT("SendFocusEvent"),
/*explain*/	_WT("将焦点事件发送到浏览器。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[43],
	},
//****** 水星窗口->发送捕获丢失事件（成员）	** 123
	{
/*ccname*/	_WT("发送捕获丢失事件"),
/*egname*/	_WT("SendCaptureLostEvent"),
/*explain*/	_WT("向浏览器发送捕获丢失事件。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星窗口->通知浏览器窗口信息已被更改（成员）	** 124
	{
/*ccname*/	_WT("通知浏览器窗口信息已更改"),
/*egname*/	_WT("NotifyMoveOrResizeStarted"),
/*explain*/	_WT("通知浏览器托管它的窗口即将被移动或移动调整大小，此方法仅用于Windows和Linux。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星窗口->取离屏渲染刷新频率（成员）	** 125
	{
/*ccname*/	_WT("取离屏渲染刷新频率"),
/*egname*/	_WT("GetWindowlessFrameRate"),
/*explain*/	_WT("以每秒帧数（fps）返回最大速率CefRenderHandler::OnPaint将被邀请用于无窗口浏览器，"
				"实际的fps可能是如果浏览器无法按请求的速率生成帧，则降低。最小值为1，最大值为60（默认值为30）"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_INT,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星窗口->置离屏渲染刷新频率（成员）	** 126
	{
/*ccname*/	_WT("置离屏渲染刷新频率"),
/*egname*/	_WT("GetWindowlessFrameRate"),
/*explain*/	_WT("设置每秒帧数（fps）的最大速率CefRenderHandler::OnPaint将被邀请用于无窗口浏览器，实际的fps可能是"
				"如果浏览器无法按请求的速率生成帧，则降低。最小值是1，最大值是60（默认30）。也可以是通过CefBrowserSettings.windowless_frame_rate创建浏览器。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[51],
	},
//****** 水星领航员->置为前台（成员）	** 127
	{
/*ccname*/	_WT("置为前台"),
/*egname*/	_WT("SetMainHeroine"),
/*explain*/	_WT("设置在需要在前台(屏幕上)显示的浏览器,设置后上一个前台浏览器将会置到后台(不可见),该命令仅会作用于默认模式下窗口的浏览器"
					"(在创建浏览器时保留窗口信息为空)。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_BOOL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[52],
	},
//****** 水星框架->构造函数（成员）	** 128
	{
/*ccname*/	_WT("构造函数"),
/*egname*/	_WT("consturct"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_CONSTURCT_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星框架->析构函数（成员）	** 129
	{
/*ccname*/	_WT("析构函数"),
/*egname*/	_WT("free"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_FREE_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星框架->复制函数（成员）	** 130
	{
/*ccname*/	_WT("复制函数"),
/*egname*/	_WT("copy"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_COPY_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星框架->是否有效（成员）	** 131
	{
/*ccname*/	_WT("是否有效"),
/*egname*/	_WT("IsValid"),
/*explain*/	_WT("如果此对象当前附加到有效框架，则为真。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_BOOL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星框架->撤销（成员）	** 132
	{
/*ccname*/	_WT("撤销"),
/*egname*/	_WT("Undo"),
/*explain*/	_WT("在此框架中执行撤销。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星框架->重做（成员）	** 133
	{
/*ccname*/	_WT("重做"),
/*egname*/	_WT("Redo"),
/*explain*/	_WT("在此框架中执行重做。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星框架->剪切（成员）	** 134
	{
/*ccname*/	_WT("剪切"),
/*egname*/	_WT("Cut"),
/*explain*/	_WT("在此框架中执行剪切。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星框架->复制（成员）	** 135
	{
/*ccname*/	_WT("复制"),
/*egname*/	_WT("Copy"),
/*explain*/	_WT("在此框架中执行复制。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星框架->粘贴（成员）	** 136
	{
/*ccname*/	_WT("粘贴"),
/*egname*/	_WT("Paste"),
/*explain*/	_WT("在此框架中执行粘贴。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星框架->删除（成员）	** 137
	{
/*ccname*/	_WT("删除"),
/*egname*/	_WT("Delete"),
/*explain*/	_WT("在此框架中执行删除。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星框架->全选（成员）	** 138
	{
/*ccname*/	_WT("全选"),
/*egname*/	_WT("SelectAll"),
/*explain*/	_WT("在此框架中执行全部选择。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星框架->取源码（成员）	** 139
	{
/*ccname*/	_WT("取源码"),
/*egname*/	_WT("GetSource"),
/*explain*/	_WT("获取此框架中的HTML源代码。"
				"异步模式下执行结果将反馈至\"异步调用结果\"事件中,如果没有错误发生|结果1|为返回值。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_TEXT,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/5,
/*arg lp*/	&s_ArgInfo[53],
	},
//****** 水星框架->取文本（成员）	** 140
	{
/*ccname*/	_WT("取文本"),
/*egname*/	_WT("GetText"),
/*explain*/	_WT("获取此框架中的HTML文本。"
				"异步模式下执行结果将反馈至\"异步调用结果\"事件中,如果没有错误发生|结果1|为返回值。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_TEXT,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/5,
/*arg lp*/	&s_ArgInfo[53],
	},
//****** 水星框架->载入网址（成员）	** 141
	{
/*ccname*/	_WT("载入网址"),
/*egname*/	_WT("LoadURL"),
/*explain*/	_WT("加载指定的| url |。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_TEXT,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[58],
	},
//****** 水星框架->载入HTML（成员）	** 142
	{
/*ccname*/	_WT("载入HTML"),
/*egname*/	_WT("LoadString"),
/*explain*/	_WT("加载| string_val |的内容 使用指定的虚拟| url |。|url|应该有一个标准的方案（例如，http方案）或类似的行为"
				"链接点击次数和网络安全限制可能无法按预期运行。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_TEXT,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/2,
/*arg lp*/	&s_ArgInfo[59],
	},
//****** 水星框架->载入HTML（成员）	** 143
	{
/*ccname*/	_WT("执行脚本"),
/*egname*/	_WT("ExecuteJavaScript"),
/*explain*/	_WT("在此框架中执行一串JavaScript代码。 | script_url |参数是可以找到有问题的脚本的URL"
				"渲染器可能会请求此URL以向开发人员显示错误。 | start_line | 参数是用于出错的基线号报告。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_TEXT,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/3,
/*arg lp*/	&s_ArgInfo[61],
	},
//****** 水星框架->是否为顶层框架（成员）	** 144
	{
/*ccname*/	_WT("是否为顶层框架"),
/*egname*/	_WT("IsMain"),
/*explain*/	_WT("如果这是主（顶级）框架，则返回true。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_BOOL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星框架->是否拥有焦点（成员）	** 145
	{
/*ccname*/	_WT("是否拥有焦点"),
/*egname*/	_WT("IsFocused"),
/*explain*/	_WT("如果这是聚焦框架，则返回true。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_BOOL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星框架->取框架名称（成员）	** 146
	{
/*ccname*/	_WT("取名称"),
/*egname*/	_WT("GetName"),
/*explain*/	_WT("返回此帧的名称。 如果框架有一个分配的名称（对于例如，通过iframe“name”属性设置）"
				"那么该值将是回。 否则，将根据该框架构造唯一的名称父层次结构。 主（顶级）框架将始终有一个空的名称值。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_TEXT,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星框架->取框架ID（成员）	** 147
	{
/*ccname*/	_WT("取ID"),
/*egname*/	_WT("GetIdentifier"),
/*explain*/	_WT("返回此帧的全局唯一标识符，如果底层帧尚不存在，则返回<0。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_INT64,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星框架->取框架ID（成员）	** 148
	{
/*ccname*/	_WT("取父框架"),
/*egname*/	_WT("GetParent"),
/*explain*/	_WT("返回此帧的父元素或NULL，如果这是主（顶级）帧。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		MAKELONG(12,0),
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星框架->取网址（成员）	** 149
	{
/*ccname*/	_WT("取网址"),
/*egname*/	_WT("GetURL"),
/*explain*/	_WT("返回当前在此框架中加载的URL。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_TEXT,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星框架->取网址（成员）	** 150
	{
/*ccname*/	_WT("取浏览器"),
/*egname*/	_WT("GetBrowser"),
/*explain*/	_WT("返回此帧所属的浏览器。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		MAKELONG(10,0),
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星文档->构造函数（成员）	** 151
	{
/*ccname*/	_WT("构造函数"),
/*egname*/	_WT("consturct"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_CONSTURCT_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星文档->析构函数（成员）	** 152
	{
/*ccname*/	_WT("析构函数"),
/*egname*/	_WT("free"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_FREE_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星文档->复制函数（成员）	** 153
	{
/*ccname*/	_WT("复制函数"),
/*egname*/	_WT("copy"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_COPY_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星文档->是否有效（成员）	** 154
	{
/*ccname*/	_WT("是否有效"),
/*egname*/	_WT("isvalid"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_BOOL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星文档->执行表达式（成员）	** 155
	{
/*ccname*/	_WT("执行脚本_求值"),
/*egname*/	_WT("eval"),
/*explain*/	_WT("在此框架中执行一串JavaScript代码。 | script_url |参数是可以找到有问题的脚本的URL"
				"渲染器可能会请求此URL以向开发人员显示错误。 | start_line | 参数是用于出错的基线号报告。"
				"异步模式下计算结果将反馈至\"异步调用结果\"事件中,如果没有错误发生|结果1|为计算值，"
				"当有错误时|结果2|为错误信息。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_TEXT,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/9,
/*arg lp*/	&s_ArgInfo[64],
	},
//****** 水星框架->取文档对象（成员）	** 156
	{
/*ccname*/	_WT("GetHyperText"),
/*egname*/	_WT("getdocument"),
/*explain*/	_WT("取出水星文档对象"),
/*category*/-1,
/*state*/	CT_IS_HIDED,
/*ret*/		MAKELONG(16,0),
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星领航员->取浏览器数量（成员）	** 157
	{
/*ccname*/	_WT("取浏览器数量"),
/*egname*/	_WT("getcount"),
/*explain*/	_WT("取出领航员中管理的浏览器数量。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_INT,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星领航员->关闭所有浏览器（成员）	** 158
	{
/*ccname*/	_WT("关闭所有浏览器"),
/*egname*/	_WT("closeallbrowser"),
/*explain*/	_WT("关闭领航员关联的所有浏览器。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 适配器->取组件版本（成员）	** 159
	{
/*ccname*/	_WT("取组件版本"),
/*egname*/	_WT("getadapter"),
/*explain*/	_WT("获取当前加载水星浏览器框架(Aquariuscef)组件包版本。"),
/*category*/0,
/*state*/	NULL,
/*ret*/		SDT_TEXT,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星窗口->取会话管理对象（成员）	** 160
	{
/*ccname*/	_WT("取饼干盒"),
/*egname*/	_WT("getcookiemanager"),
/*explain*/	_WT("获取与浏览器相关联的cookie管理对象,如果浏览器没有被指定单独的Cookie管理对象,则将返回全局的Cookie管理对象。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		MAKELONG(19,0),
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** CookieManager->构造函数（成员）	** 161
	{
/*ccname*/	_WT("构造函数"),
/*egname*/	_WT("consturct"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_CONSTURCT_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** CookieManager->析构函数（成员）	** 162
	{
/*ccname*/	_WT("析构函数"),
/*egname*/	_WT("free"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_FREE_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** CookieManager->复制函数（成员）	** 163
	{
/*ccname*/	_WT("复制函数"),
/*egname*/	_WT("copy"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_COPY_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** CookieManager->是否有效（成员）	** 164
	{
/*ccname*/	_WT("是否有效"),
/*egname*/	_WT("IsValid"),
/*explain*/	_WT("如果此对象当前附加到有效对象，则为真。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_BOOL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** CookieManager->从全局初始化（成员）	** 165
	{
/*ccname*/	_WT("从全局初始化"),
/*egname*/	_WT("InitFromGlobal"),
/*explain*/	_WT("返回全局cookie管理器。 "),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_BOOL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** CookieManager->GetAllCookies（成员）	** 166
	{
/*ccname*/	_WT("取出全部饼干项"),
/*egname*/	_WT("GetAllCookies"),
/*explain*/	_WT("本方法不能在事件中调用。访问IO线程上的所有cookie。 返回的Cookie是按照最长的路径，然后按最早的创建日期。"
				"如果cookie为false，则返回false无法访问。"),
/*category*/-1,
/*state*/	CT_RETRUN_ARY_TYPE_DATA,
/*ret*/		MAKELONG(17,0),
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** CookieManager->GetUrlCookies（成员）	** 167
	{
/*ccname*/	_WT("取出URL饼干项"),
/*egname*/	_WT("GetUrlCookies"),
/*explain*/	_WT("本方法不能在事件中调用。访问IO线程上的Cookie子集。 按照url进行过滤,如果| includeHttpOnly | 为真HTTP-only cookies也会包含在结果中。 "
				"如果cookie为false，则返回false无法访问。"),
/*category*/-1,
/*state*/	CT_RETRUN_ARY_TYPE_DATA,
/*ret*/		MAKELONG(17,0),
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/2,
/*arg lp*/	&s_ArgInfo[73],
	},
//****** CookieManager->SetCookie（成员）	** 168
	{
/*ccname*/	_WT("置饼干项"),
/*egname*/	_WT("SetCookie"),
/*explain*/	_WT("设置一个cookie属性到管理器中。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_BOOL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/7,
/*arg lp*/	&s_ArgInfo[75],
	},
//****** CookieManager->DeleteCookie（成员）	** 169
	{
/*ccname*/	_WT("删除饼干项"),
/*egname*/	_WT("DeleteCookie"),
/*explain*/	_WT("删除所有与指定参数匹配的cookie。 "),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_BOOL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/2,
/*arg lp*/	&s_ArgInfo[82],
	},
//****** CookieManager->FlushStore（成员）	** 170
	{
/*ccname*/	_WT("写入存储器"),
/*egname*/	_WT("FlushStore"),
/*explain*/	_WT("将缓存中的cookie存储至磁盘上(如果有的话)。 "),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** CookieManager->GetCookieMerge（成员）	** 171
	{
/*ccname*/	_WT("取出全部格式化饼干项"),
/*egname*/	_WT("GetCookieMerge"),
/*explain*/	_WT("返回特定url下的所有cookie子集并将以\"name=value; \"的形式组合成一个字符串。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_TEXT,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[84],
	},
//****** CookieManager->SetCookieMerge（成员）	** 172
	{
/*ccname*/	_WT("设置格式化饼干项"),
/*egname*/	_WT("SetCookieMerge"),
/*explain*/	_WT("将一个\"name=value; \"形式的cookie子集字符串存储到当前cookie管理器中并与url关联。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_BOOL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/2,
/*arg lp*/	&s_ArgInfo[85],
	},
//****** 文本字典->置键值（成员）	** 173
	{
/*ccname*/	_WT("置表项键值"),
/*egname*/	_WT("setvalue"),
/*explain*/	_WT("替换成员指针中的键值数据。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_TEXT,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/2,
/*arg lp*/	&s_ArgInfo[89],
	},
//****** 文本字典V2->置键值（成员）	** 174
	{
/*ccname*/	_WT("置表项键值"),
/*egname*/	_WT("setvalue"),
/*explain*/	_WT("替换成员指针中的键值数据。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_TEXT,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/2,
/*arg lp*/	&s_ArgInfo[89],
	},
//****** V8Value->构造函数（成员）	** 175
	{
/*ccname*/	_WT("构造函数"),
/*egname*/	_WT("consturct"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_CONSTURCT_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** V8Value->析构函数（成员）	** 176
	{
/*ccname*/	_WT("析构函数"),
/*egname*/	_WT("free"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_FREE_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** V8Value->复制函数（成员）	** 177
	{
/*ccname*/	_WT("复制函数"),
/*egname*/	_WT("copy"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_COPY_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** V8Value->是否有效（成员）	** 178
	{
/*ccname*/	_WT("是否有效"),
/*egname*/	_WT("IsValid"),
/*explain*/	_WT("如果此对象当前附加到有效对象，则为真。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_BOOL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** V8Value->是否有效（成员）	** 179
	{
/*ccname*/	_WT("取类型"),
/*egname*/	_WT("GetType"),
/*explain*/	_WT("返回对象中的数据类型"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_INT,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[91],
	},
//****** V8Value->取值（成员）	** 180
	{
/*ccname*/	_WT("取值"),
/*egname*/	_WT("GetValue"),
/*explain*/	_WT("返回对象中的数据值"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_ALL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[91],
	},
//****** V8Value->置值（成员）	** 181
	{
/*ccname*/	_WT("置值"),
/*egname*/	_WT("SetValue"),
/*explain*/	_WT("返回对象中的数据值"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_ALL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[92],
	},
//****** 水星领航员->注册脚本类（成员）	** 182
	{
/*ccname*/	_WT("注册类"),
/*egname*/	_WT("RegV8Accessor"),
/*explain*/	_WT("在V8的上下文环境中注册一个访问类,成功返回实例对象。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		MAKELONG(21,0),
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[93],
	},
//****** 水星领航员->注册脚本变量（成员）	** 183
	{
/*ccname*/	_WT("注册类属性"),
/*egname*/	_WT("RegV8Var"),
/*explain*/	_WT("在类中注册一个可访问的变量,当被取值和赋值时会触发变量被赋值和变量被取值事件。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_BOOL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/2,
/*arg lp*/	&s_ArgInfo[94],
	},
//****** 水星领航员->注册脚本变量（成员）	** 184
	{
/*ccname*/	_WT("注册类函数"),
/*egname*/	_WT("RegV8Function"),
/*explain*/	_WT("在类中注册一个可调用的函数,当被调用时会触发被调用事件。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_BOOL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/2,
/*arg lp*/	&s_ArgInfo[96],
	},
//****** HyperText->超文本框架（成员）	** 185
	{
/*ccname*/	_WT("取框架"),
/*egname*/	_WT("GetFrame"),
/*explain*/	_WT("获取与自身关联的超文本框架对象。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		MAKELONG(12,0),
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** PostDataElement->构造函数（成员）	** 186
	{
/*ccname*/	_WT("构造函数"),
/*egname*/	_WT("consturct"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_CONSTURCT_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** PostDataElement->析构函数（成员）	** 187
	{
/*ccname*/	_WT("析构函数"),
/*egname*/	_WT("free"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_FREE_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** PostDataElement->复制函数（成员）	** 188
	{
/*ccname*/	_WT("复制函数"),
/*egname*/	_WT("copy"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_COPY_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** PostDataElement->是否有效（成员）	** 189
	{
/*ccname*/	_WT("是否有效"),
/*egname*/	_WT("IsValid"),
/*explain*/	_WT("如果此对象当前附加到有效对象，则为真。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_BOOL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** PostDataElement->是否为只读（成员）	** 190
	{
/*ccname*/	_WT("是否为只读"),
/*egname*/	_WT("IsReadOnly"),
/*explain*/	_WT("如果此对象是只读的，则返回true。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_BOOL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** PostDataElement->提交空值（成员）	** 191
	{
/*ccname*/	_WT("提交空值"),
/*egname*/	_WT("SetToEmpty"),
/*explain*/	_WT("从post数据元素中删除所有内容。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** PostDataElement->提交文件（成员）	** 192
	{
/*ccname*/	_WT("提交文件"),
/*egname*/	_WT("SetToFile"),
/*explain*/	_WT("post数据元素将表示一个文件。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[98],
	},
//****** PostDataElement->提交字节集（成员）	** 193
	{
/*ccname*/	_WT("提交字节集"),
/*egname*/	_WT("SetToBytes"),
/*explain*/	_WT("post数据元素将表示字节。 传入的字节将被复制。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[99],
	},
//****** PostDataElement->取类型（成员）	** 194
	{
/*ccname*/	_WT("取类型"),
/*egname*/	_WT("GetType"),
/*explain*/	_WT("返回此post数据元素的类型。参考常量列表: #HTTP正文字段常量.xxx "),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_INT,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** PostDataElement->取回文件（成员）	** 195
	{
/*ccname*/	_WT("取回文件"),
/*egname*/	_WT("GetFile"),
/*explain*/	_WT("返回文件名。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_TEXT,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** PostDataElement->取回字节集（成员）	** 196
	{
/*ccname*/	_WT("取回字节集"),
/*egname*/	_WT("GetBytes"),
/*explain*/	_WT("返回字节集。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_BIN,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** PostData->构造函数（成员）	** 197
	{
/*ccname*/	_WT("构造函数"),
/*egname*/	_WT("consturct"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_CONSTURCT_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** PostData->析构函数（成员）	** 198
	{
/*ccname*/	_WT("析构函数"),
/*egname*/	_WT("free"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_FREE_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** PostData->复制函数（成员）	** 199
	{
/*ccname*/	_WT("复制函数"),
/*egname*/	_WT("copy"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_COPY_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** PostData->是否有效（成员）	** 200
	{
/*ccname*/	_WT("是否有效"),
/*egname*/	_WT("IsValid"),
/*explain*/	_WT("如果此对象当前附加到有效对象，则为真。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_BOOL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** PostData->是否为只读（成员）	** 201
	{
/*ccname*/	_WT("是否为只读"),
/*egname*/	_WT("IsReadOnly"),
/*explain*/	_WT("如果此对象是只读的，则返回true。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_BOOL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** PostData->是否为只读（成员）	** 202
	{
/*ccname*/	_WT("是否包含字段"),
/*egname*/	_WT("HasExcludedElements"),
		/*explain*/	_WT("Returns true if the underlying POST data includes elements that are not"
						"represented by this CefPostData object (for example, multi-part file upload"
						"data). Modifying CefPostData objects with excluded elements may result in"
						"the request failing."),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_BOOL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** PostData->取提交数量（成员）	** 203
	{
/*ccname*/	_WT("取字段数"),
/*egname*/	_WT("GetElementCount"),
/*explain*/	_WT("返回现有提交数据元素的数量。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_INT,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** PostData->取提交列表（成员）	** 204
	{
/*ccname*/	_WT("取字段列表"),
/*egname*/	_WT("GetElements"),
/*explain*/	_WT("检索发布数据元素。"),
/*category*/-1,
/*state*/	CT_RETRUN_ARY_TYPE_DATA,
/*ret*/		MAKELONG(22,0),
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** PostData->删除提交项（成员）	** 205
	{
/*ccname*/	_WT("删除字段"),
/*egname*/	_WT("RemoveElement"),
/*explain*/	_WT("删除指定的发布数据元素。 如果删除成功，则返回true。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_BOOL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[100],
	},
//****** PostData->加入提交项（成员）	** 206
	{
/*ccname*/	_WT("加入字段"),
/*egname*/	_WT("RemoveElement"),
/*explain*/	_WT("添加指定的发布数据元素。 如果添加成功，则返回true。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_BOOL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[101],
	},
//****** PostData->清空提交项（成员）	** 207
	{
/*ccname*/	_WT("清空字段"),
/*egname*/	_WT("RemoveElements"),
/*explain*/	_WT("删除所有现有的Post数据元素。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** Request->构造函数（成员）	** 208
	{
/*ccname*/	_WT("构造函数"),
/*egname*/	_WT("consturct"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_CONSTURCT_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** Request->析构函数（成员）	** 209
	{
/*ccname*/	_WT("析构函数"),
/*egname*/	_WT("free"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_FREE_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** Request->复制函数（成员）	** 210
	{
/*ccname*/	_WT("复制函数"),
/*egname*/	_WT("copy"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_COPY_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** Request->是否有效（成员）	** 211
	{
/*ccname*/	_WT("是否有效"),
/*egname*/	_WT("IsValid"),
/*explain*/	_WT("如果此对象当前附加到有效对象，则为真。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_BOOL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** Request->是否为只读（成员）	** 212
	{
/*ccname*/	_WT("是否为只读"),
/*egname*/	_WT("IsReadOnly"),
/*explain*/	_WT("如果此对象是只读的，则返回true。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_BOOL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** Request->GetURL（成员）	** 213
	{
/*ccname*/	_WT("取URL"),
/*egname*/	_WT("GetURL"),
/*explain*/	_WT("获取完全限定的URL。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_TEXT,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** Request->SetURL（成员）	** 214
	{
/*ccname*/	_WT("置URL"),
/*egname*/	_WT("SetURL"),
/*explain*/	_WT("设置完全限定的URL。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[102],
	},
//****** Request->GetMethod（成员）	** 215
	{
/*ccname*/	_WT("取方法"),
/*egname*/	_WT("GetMethod"),
/*explain*/	_WT("获取请求方法类型。 如果提供了发布数据，则该值将默认为POST，否则为GET。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_TEXT,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** Request->SetMethod（成员）	** 216
	{
/*ccname*/	_WT("置方法"),
/*egname*/	_WT("SetMethod"),
/*explain*/	_WT("设置请求方法类型。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[103],
	},
//****** Request->SetURL（成员）	** 217
	{
/*ccname*/	_WT("置来路URL"),
/*egname*/	_WT("SetReferrer"),
/*explain*/	_WT("设置引荐来源网址和政策。 如果非空，则引荐来源网址必须为完全限定HTTP或HTTPS方案组件。 任何用户名，密码或参考组件将被删除。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[104],
	},
//****** Request->GetReferrerURL（成员）	** 218
	{
/*ccname*/	_WT("取来路URL"),
/*egname*/	_WT("GetReferrerURL"),
/*explain*/	_WT("获取引荐来源网址。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_TEXT,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** Request->GetReferrerPolicy（成员）	** 219
	{
/*ccname*/	_WT("取来路策略"),
/*egname*/	_WT("GetReferrerPolicy"),
/*explain*/	_WT("获取引荐来源政策。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_INT,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** Request->GetPostData（成员）	** 220
	{
/*ccname*/	_WT("取出正文"),
/*egname*/	_WT("GetPostData"),
/*explain*/	_WT("获取发布数据。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		MAKELONG(23,0),
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** Request->SetPostData（成员）	** 221
	{
/*ccname*/	_WT("设置正文"),
/*egname*/	_WT("SetPostData"),
/*explain*/	_WT("获取发布数据。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[106],
	},
//****** Request->GetHeaderMap（成员）	** 222
	{
/*ccname*/	_WT("取HTTP标头"),
/*egname*/	_WT("GetHeaderMap"),
/*explain*/	_WT("获取标头值。 如果有的话，将不包括Referer值。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		MAKELONG(5,0),
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** Request->SetHeaderMap（成员）	** 223
	{
/*ccname*/	_WT("置HTTP标头"),
/*egname*/	_WT("SetHeaderMap"),
/*explain*/	_WT("设置标头值。 如果标头映射中存在Referer值，则将删除并忽略它。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[107],
	},
//****** Request->GetFlags（成员）	** 224
	{
/*ccname*/	_WT("取请求标志位"),
/*egname*/	_WT("GetFlags"),
/*explain*/	_WT("获取与CefURLRequest结合使用的标志。参考常量列表: #资源加载结果常量.xxx。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_INT,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** Request->GetFlags（成员）	** 225
	{
/*ccname*/	_WT("置请求标志位"),
/*egname*/	_WT("SetFlags"),
/*explain*/	_WT("设置与CefURLRequest结合使用的标志。 有关支持的值，参考常量列表: #资源加载结果常量.xxx。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[108],
	},
//****** Request->GetFirstPartyForCookies（成员）	** 226
	{
/*ccname*/	_WT("取首个关联饼干"),
/*egname*/	_WT("GetFirstPartyForCookies"),
/*explain*/	_WT("将URL设置为与之结合使用的cookie的第一方CefURLRequest。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_TEXT,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** Request->SetFirstPartyForCookies（成员）	** 227
	{
/*ccname*/	_WT("置首个关联饼干"),
/*egname*/	_WT("SetFirstPartyForCookies"),
/*explain*/	_WT("获取与第一方结合使用的cookie的URL,CefURLRequest。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[109],
	},
//****** Request->GetResourceType（成员）	** 228
	{
/*ccname*/	_WT("取资源类型"),
/*egname*/	_WT("GetResourceType"),
/*explain*/	_WT("获取此请求的资源类型,参考常量集合: #资源类型常量.xxx 仅在浏览器进程中可用。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_INT,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** Response->构造函数（成员）	** 229
	{
/*ccname*/	_WT("构造函数"),
/*egname*/	_WT("consturct"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_CONSTURCT_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** Response->析构函数（成员）	** 230
	{
/*ccname*/	_WT("析构函数"),
/*egname*/	_WT("free"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_FREE_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** Response->复制函数（成员）	** 231
	{
/*ccname*/	_WT("复制函数"),
/*egname*/	_WT("copy"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_COPY_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** Response->是否有效（成员）	** 232
	{
/*ccname*/	_WT("是否有效"),
/*egname*/	_WT("IsValid"),
/*explain*/	_WT("如果此对象当前附加到有效对象，则为真。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_BOOL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** Response->是否为只读（成员）	** 233
	{
/*ccname*/	_WT("是否为只读"),
/*egname*/	_WT("IsReadOnly"),
/*explain*/	_WT("如果此对象是只读的，则返回true。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_BOOL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** Response->GetStatus（成员）	** 234
	{
/*ccname*/	_WT("取HTTP状态码"),
/*egname*/	_WT("GetStatus"),
/*explain*/	_WT("获取响应状态代码。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_INT,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** Response->SetStatus（成员）	** 235
	{
/*ccname*/	_WT("置HTTP状态码"),
/*egname*/	_WT("SetStatus"),
/*explain*/	_WT("设置响应状态代码。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[110],
	},
//****** Response->GetStatusText（成员）	** 236
	{
/*ccname*/	_WT("取HTTP状态文本"),
/*egname*/	_WT("GetStatusText"),
/*explain*/	_WT("获取响应状态文本。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_TEXT,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** Response->SetStatusText（成员）	** 237
	{
/*ccname*/	_WT("置HTTP状态文本"),
/*egname*/	_WT("SetStatusText"),
/*explain*/	_WT("设置响应状态文本。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[111],
	},
//****** Response->GetMimeType（成员）	** 238
	{
/*ccname*/	_WT("取MIME类型"),
/*egname*/	_WT("GetMimeType"),
/*explain*/	_WT("获取响应mime类型。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_TEXT,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** Response->SetMimeType（成员）	** 239
	{
/*ccname*/	_WT("置MIME类型"),
/*egname*/	_WT("SetMimeType"),
/*explain*/	_WT("设置响应mime类型。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[112],
	},
//****** Response->GetHeaderMap（成员）	** 240
	{
/*ccname*/	_WT("取HTTP标头"),
/*egname*/	_WT("GetHeaderMap"),
/*explain*/	_WT("获取所有响应标头字段。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		MAKELONG(5,0),
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** Response->SetHeaderMap（成员）	** 241
	{
/*ccname*/	_WT("置HTTP标头"),
/*egname*/	_WT("SetHeaderMap"),
/*explain*/	_WT("设置所有响应头字段。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[107],
	},
//****** 超文本框架->LoadRequest（成员）	** 242
	{
/*ccname*/	_WT("提交HTTP请求"),
/*egname*/	_WT("LoadRequest"),
/*explain*/	_WT("加载| request |表示的请求 目的。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[129],
	},
//****** JSDialogCallback->构造函数（成员）	** 243
	{
/*ccname*/	_WT("构造函数"),
/*egname*/	_WT("consturct"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_CONSTURCT_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** JSDialogCallback->析构函数（成员）	** 244
	{
/*ccname*/	_WT("析构函数"),
/*egname*/	_WT("free"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_FREE_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** JSDialogCallback->复制函数（成员）	** 245
	{
/*ccname*/	_WT("复制函数"),
/*egname*/	_WT("copy"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_COPY_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** JSDialogCallback->是否有效（成员）	** 246
	{
/*ccname*/	_WT("是否有效"),
/*egname*/	_WT("IsValid"),
/*explain*/	_WT("如果此对象当前附加到有效对象，则为真。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_BOOL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** JSDialogCallback->确认（成员）	** 247
	{
/*ccname*/	_WT("确认"),
/*egname*/	_WT("Continue"),
/*explain*/	_WT("继续JS对话框请求。 设置|成功| 如果按下确定按钮，则为true。 | user_input | 应为快速对话框指定值。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/2,
/*arg lp*/	&s_ArgInfo[113],
	},
//****** FileDialogCallback->构造函数（成员）	** 248
	{
/*ccname*/	_WT("构造函数"),
/*egname*/	_WT("consturct"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_CONSTURCT_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** FileDialogCallback->析构函数（成员）	** 249
	{
/*ccname*/	_WT("析构函数"),
/*egname*/	_WT("free"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_FREE_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** FileDialogCallback->复制函数（成员）	** 250
	{
/*ccname*/	_WT("复制函数"),
/*egname*/	_WT("copy"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_COPY_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** FileDialogCallback->是否有效（成员）	** 251
	{
/*ccname*/	_WT("是否有效"),
/*egname*/	_WT("IsValid"),
/*explain*/	_WT("如果此对象当前附加到有效对象，则为真。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_BOOL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** FileDialogCallback->确认（成员）	** 252
	{
/*ccname*/	_WT("确认"),
/*egname*/	_WT("Continue"),
/*explain*/	_WT("继续文件选择。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/2,
/*arg lp*/	&s_ArgInfo[115],
	},
//****** FileDialogCallback->取消（成员）	** 253
	{
/*ccname*/	_WT("取消"),
/*egname*/	_WT("Cancel"),
/*explain*/	_WT("取消文件选择。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 浏览器后台->发送按键事件（成员）	** 254
	{
/*ccname*/	_WT("发送按键消息"),
/*egname*/	_WT("SendKeyEvent"),
/*explain*/	_WT("将按键事件发送到浏览器。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[117],
	},
//****** 浏览器后台->发送按键事件（成员）	** 255
	{
/*ccname*/	_WT("发送鼠标点击消息"),
/*egname*/	_WT("SendMouseClickEvent"),
/*explain*/	_WT("将鼠标单击事件发送到浏览器。 | x | 和| y | 坐标是视图的左上角。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/4,
/*arg lp*/	&s_ArgInfo[118],
	},
//****** 浏览器后台->发送鼠标移动事件（成员）	** 256
	{
/*ccname*/	_WT("发送鼠标移动消息"),
/*egname*/	_WT("SendMouseMoveEvent"),
/*explain*/	_WT("将鼠标移动事件发送到浏览器。 | x | 和| y | 坐标相对于视图的左上角。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/2,
/*arg lp*/	&s_ArgInfo[122],
	},
//****** 浏览器后台->发送鼠标移动事件（成员）	** 257
	{
/*ccname*/	_WT("发送鼠标滚轮消息"),
/*egname*/	_WT("SendMouseWheelEvent"),
/*explain*/	_WT("将鼠标滚轮事件发送到浏览器。| x | 和| y | 坐标是相对于视图的左上角。 | deltaX | 和 | deltaY |"
				"值分别表示X和Y方向上的运动增量。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/3,
/*arg lp*/	&s_ArgInfo[124],
	},
//****** DownloadItem->构造函数（成员）	** 258
	{
/*ccname*/	_WT("构造函数"),
/*egname*/	_WT("consturct"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_CONSTURCT_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** DownloadItem->析构函数（成员）	** 259
	{
/*ccname*/	_WT("析构函数"),
/*egname*/	_WT("free"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_FREE_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** DownloadItem->复制函数（成员）	** 260
	{
/*ccname*/	_WT("复制函数"),
/*egname*/	_WT("copy"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_COPY_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** DownloadItem->是否有效（成员）	** 261
	{
/*ccname*/	_WT("是否有效"),
/*egname*/	_WT("IsValid"),
/*explain*/	_WT("如果此对象当前附加到有效对象，则为真。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_BOOL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** DownloadItem->是否仍在下载中（成员）	** 262
	{
/*ccname*/	_WT("是否仍在下载中"),
/*egname*/	_WT("IsInProgress"),
/*explain*/	_WT("如果下载正在进行，则返回true。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_BOOL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** DownloadItem->是否已下载完成（成员）	** 263
	{
/*ccname*/	_WT("是否已下载完成"),
/*egname*/	_WT("IsComplete"),
/*explain*/	_WT("如果下载完成，则返回true。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_BOOL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** DownloadItem->是否已下载完成（成员）	** 264
	{
/*ccname*/	_WT("是否已取消"),
/*egname*/	_WT("IsCanceled"),
/*explain*/	_WT("如果下载已被取消或中断，则返回true。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_BOOL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** DownloadItem->取现行下载速度（成员）	** 265
	{
/*ccname*/	_WT("取现行下载速度"),
/*egname*/	_WT("GetCurrentSpeed"),
/*explain*/	_WT("返回以字节/秒为单位的简单速度估计。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_INT64,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** DownloadItem->取下载百分比（成员）	** 266
	{
/*ccname*/	_WT("取下载百分比"),
/*egname*/	_WT("GetPercentComplete"),
/*explain*/	_WT("如果接收总大小未知，则返回粗略百分比完成或-1。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_INT,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** DownloadItem->取总长度（成员）	** 267
	{
/*ccname*/	_WT("取总长度"),
/*egname*/	_WT("GetTotalBytes"),
/*explain*/	_WT("返回总字节数。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_INT64,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** DownloadItem->取已下载长度（成员）	** 268
	{
/*ccname*/	_WT("取已下载长度"),
/*egname*/	_WT("GetReceivedBytes"),
/*explain*/	_WT("返回总字节数。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_INT64,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** DownloadItem->取开始时间（成员）	** 269
	{
/*ccname*/	_WT("取开始时间"),
/*egname*/	_WT("GetStartTime"),
/*explain*/	_WT("返回下载开始的时间。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		MAKELONG(18,0),
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** DownloadItem->取结束时间（成员）	** 270
	{
/*ccname*/	_WT("取结束时间"),
/*egname*/	_WT("GetStartTime"),
/*explain*/	_WT("返回下载结束的时间。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		MAKELONG(18,0),
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** DownloadItem->取存储位置（成员）	** 271
	{
/*ccname*/	_WT("取存储位置"),
/*egname*/	_WT("GetFullPath"),
/*explain*/	_WT("返回下载或下载文件的完整路径。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_TEXT,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** DownloadItem->取关联标识符（成员）	** 272
	{
/*ccname*/	_WT("取关联标识符"),
/*egname*/	_WT("GetId"),
/*explain*/	_WT("返回此下载的唯一标识符。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_INT,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** DownloadItem->GetURL（成员）	** 273
	{
/*ccname*/	_WT("取地址"),
/*egname*/	_WT("GetURL"),
/*explain*/	_WT("返回URL。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_TEXT,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** DownloadItem->取原始地址（成员）	** 274
	{
/*ccname*/	_WT("取原始地址"),
/*egname*/	_WT("GetOriginalUrl"),
/*explain*/	_WT("在重定向之前返回原始URL。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_TEXT,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** DownloadItem->取推荐文件名（成员）	** 275
	{
/*ccname*/	_WT("取推荐文件名"),
/*egname*/	_WT("GetSuggestedFileName"),
/*explain*/	_WT("返回建议的文件名。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_TEXT,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** DownloadItem->取描述信息（成员）	** 276
	{
/*ccname*/	_WT("取内容描述"),
/*egname*/	_WT("GetContentDisposition"),
/*explain*/	_WT("Returns the content disposition."),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_TEXT,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** DownloadItem->GetMimeType（成员）	** 277
	{
/*ccname*/	_WT("取MIME类型"),
/*egname*/	_WT("GetContentDisposition"),
/*explain*/	_WT("Returns the mime type."),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_TEXT,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** BeforeDownloadItemCallback->构造函数（成员）	** 278
	{
/*ccname*/	_WT("构造函数"),
/*egname*/	_WT("consturct"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_CONSTURCT_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** BeforeDownloadItemCallback->析构函数（成员）	** 279
	{
/*ccname*/	_WT("析构函数"),
/*egname*/	_WT("free"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_FREE_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** BeforeDownloadItemCallback->复制函数（成员）	** 280
	{
/*ccname*/	_WT("复制函数"),
/*egname*/	_WT("copy"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_COPY_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** BeforeDownloadItemCallback->是否有效（成员）	** 281
	{
/*ccname*/	_WT("是否有效"),
/*egname*/	_WT("IsValid"),
/*explain*/	_WT("如果此对象当前附加到有效对象，则为真。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_BOOL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** BeforeDownloadItemCallback->确认（成员）	** 282
	{
/*ccname*/	_WT("确认"),
/*egname*/	_WT("Continue"),
/*explain*/	_WT("致电继续下载。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/2,
/*arg lp*/	&s_ArgInfo[127],
	},
//****** DownloadItemCallback->构造函数（成员）	** 283
	{
/*ccname*/	_WT("构造函数"),
/*egname*/	_WT("consturct"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_CONSTURCT_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** DownloadItemCallback->析构函数（成员）	** 284
	{
/*ccname*/	_WT("析构函数"),
/*egname*/	_WT("free"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_FREE_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** DownloadItemCallback->复制函数（成员）	** 285
	{
/*ccname*/	_WT("复制函数"),
/*egname*/	_WT("copy"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_COPY_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** DownloadItemCallback->是否有效（成员）	** 286
	{
/*ccname*/	_WT("是否有效"),
/*egname*/	_WT("IsValid"),
/*explain*/	_WT("如果此对象当前附加到有效对象，则为真。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_BOOL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** DownloadItemCallback->取消（成员）	** 287
	{
/*ccname*/	_WT("取消"),
/*egname*/	_WT("Cancel"),
/*explain*/	_WT("致电取消下载。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** DownloadItemCallback->暂停（成员）	** 288
	{
/*ccname*/	_WT("暂停"),
/*egname*/	_WT("Pause"),
/*explain*/	_WT("呼叫暂停下载。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** DownloadItemCallback->恢复（成员）	** 289
	{
/*ccname*/	_WT("恢复"),
/*egname*/	_WT("Resume"),
/*explain*/	_WT("致电恢复下载。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** AuthCallback->构造函数（成员）	** 290
	{
/*ccname*/	_WT("构造函数"),
/*egname*/	_WT("consturct"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_CONSTURCT_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** AuthCallback->析构函数（成员）	** 291
	{
/*ccname*/	_WT("析构函数"),
/*egname*/	_WT("free"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_FREE_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** AuthCallback->复制函数（成员）	** 292
	{
/*ccname*/	_WT("复制函数"),
/*egname*/	_WT("copy"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_COPY_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** AuthCallback->是否有效（成员）	** 293
	{
/*ccname*/	_WT("是否有效"),
/*egname*/	_WT("IsValid"),
/*explain*/	_WT("如果此对象当前附加到有效对象，则为真。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_BOOL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** AuthCallback->确认（成员）	** 294
	{
/*ccname*/	_WT("确认"),
/*egname*/	_WT("Continue"),
/*explain*/	_WT("是否确认认证"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/2,
/*arg lp*/	&s_ArgInfo[130],
	},
//****** AuthCallback->取消（成员）	** 295
	{
/*ccname*/	_WT("取消"),
/*egname*/	_WT("Cancel"),
/*explain*/	_WT("取消本次认证请求。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星领航员->初始化（成员）	** 296
	{
/*ccname*/	_WT("初始化"),
/*egname*/	_WT("Initial"),
/*explain*/	_WT("加载组件包并初始化全局设置"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** AuthCallback->构造函数（成员）	** 297
	{
/*ccname*/	_WT("构造函数"),
/*egname*/	_WT("consturct"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_CONSTURCT_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** AuthCallback->析构函数（成员）	** 298
	{
/*ccname*/	_WT("析构函数"),
/*egname*/	_WT("free"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_FREE_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** AuthCallback->复制函数（成员）	** 299
	{
/*ccname*/	_WT("复制函数"),
/*egname*/	_WT("copy"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_COPY_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** AuthCallback->是否有效（成员）	** 300
	{
/*ccname*/	_WT("是否有效"),
/*egname*/	_WT("IsValid"),
/*explain*/	_WT("如果此对象当前附加到有效对象，则为真。"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_BOOL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 菜单参数->取框架地址（成员）	** 301
	{
/*ccname*/	_WT("取框架地址"),
/*egname*/	_WT("GetFrameURL"),
/*explain*/	_WT("返回框架URL"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_TEXT,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 菜单参数->取链接地址（成员）	** 302
	{
/*ccname*/	_WT("取链接地址"),
/*egname*/	_WT("GetLinkURL"),
/*explain*/	_WT("返回链接URL"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_TEXT,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 菜单参数->取源地址（成员）	** 303
	{
/*ccname*/	_WT("取源地址"),
/*egname*/	_WT("GetSourceURL"),
/*explain*/	_WT("返回源URL"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_TEXT,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 菜单参数->取页面地址（成员）	** 304
	{
/*ccname*/	_WT("取页面地址"),
/*egname*/	_WT("GetPageURL"),
/*explain*/	_WT("返回页面URL"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_TEXT,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 菜单参数->取选择文本（成员）	** 305
	{
/*ccname*/	_WT("取选择文本"),
/*egname*/	_WT("GetSelectionText"),
/*explain*/	_WT("返回选择的文本"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_TEXT,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 菜单参数->取未过滤链接地址（成员）	** 306
	{
/*ccname*/	_WT("取未过滤链接地址"),
/*egname*/	_WT("GetUnfilteredLinkUrl"),
/*explain*/	_WT("返回未过滤链接URL"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_TEXT,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 菜单参数->取框架字符集（成员）	** 307
	{
/*ccname*/	_WT("取框架字符集"),
/*egname*/	_WT("GetFrameCharset"),
/*explain*/	_WT("返回框架主体字符集"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_TEXT,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 菜单参数->取X位置（成员）	** 308
	{
/*ccname*/	_WT("取X位置"),
/*egname*/	_WT("GetXCoord"),
/*explain*/	_WT("返回X位置"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_INT,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 菜单参数->取Y位置（成员）	** 309
	{
/*ccname*/	_WT("取Y位置"),
/*egname*/	_WT("GetYCoord"),
/*explain*/	_WT("返回Y位置"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_INT,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 菜单模板->取数量（成员）	** 310
	{
/*ccname*/	_WT("取数量"),
/*egname*/	_WT("GetCount"),
/*explain*/	_WT("返回菜单项目数量"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_INT,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 菜单模板->添加分隔线（成员）	** 311
	{
/*ccname*/	_WT("添加分隔线"),
/*egname*/	_WT("AddSeparator"),
/*explain*/	_WT("添加一个分隔线"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_BOOL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 菜单模板->添加菜单（成员）	** 312
	{
/*ccname*/	_WT("添加菜单"),
/*egname*/	_WT("AddItem"),
/*explain*/	_WT("添加一个菜单选项"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_BOOL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/2,
/*arg lp*/	&s_ArgInfo[132],
	},
//****** 菜单模板->添加多选菜单（成员）	** 313
	{
/*ccname*/	_WT("添加多选菜单"),
/*egname*/	_WT("AddRadioItem"),
/*explain*/	_WT("添加一个多选菜单选项"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_BOOL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/3,
/*arg lp*/	&s_ArgInfo[134],
	},
//****** 菜单模板->添加子菜单（成员）	** 314
	{
/*ccname*/	_WT("添加子菜单"),
/*egname*/	_WT("AddSubItem"),
/*explain*/	_WT("添加一个子菜单"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		MAKELONG(44,0),
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/2,
/*arg lp*/	&s_ArgInfo[137],
	},
//****** 菜单模板->添加单选菜单（成员）	** 315
	{
/*ccname*/	_WT("添加单选菜单"),
/*egname*/	_WT("AddCheckItem"),
/*explain*/	_WT("添加一个单选菜单"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_BOOL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/2,
/*arg lp*/	&s_ArgInfo[139],
	},
//****** 菜单模板->取标题（成员）	** 316
	{
/*ccname*/	_WT("取标题"),
/*egname*/	_WT("GetLabel"),
/*explain*/	_WT("取菜单项标题"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_TEXT,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[141],
	},
//****** 菜单模板->置标题（成员）	** 317
	{
/*ccname*/	_WT("置标题"),
/*egname*/	_WT("SetLabel"),
/*explain*/	_WT("设置菜单项标题"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_BOOL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/2,
/*arg lp*/	&s_ArgInfo[142],
	},
//****** 菜单模板->取类型（成员）	** 318
	{
/*ccname*/	_WT("取类型"),
/*egname*/	_WT("GetType"),
/*explain*/	_WT("取菜单项类型"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_INT,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[144],
	},
//****** 菜单模板->是否选中（成员）	** 319
	{
/*ccname*/	_WT("是否选中"),
/*egname*/	_WT("IsChecked"),
/*explain*/	_WT("判断是否菜单项选中"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_BOOL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[145],
	},
//****** 菜单模板->置选中（成员）	** 320
	{
/*ccname*/	_WT("置选中状态"),
/*egname*/	_WT("SetChecked"),
/*explain*/	_WT("设置菜单项选中"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_BOOL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/2,
/*arg lp*/	&s_ArgInfo[146],
	},
//****** 菜单模板->是否可见（成员）	** 321
	{
/*ccname*/	_WT("是否可视"),
/*egname*/	_WT("IsVisible"),
/*explain*/	_WT("判断是否菜单项可视"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_BOOL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[148],
	},
//****** 菜单模板->置可视（成员）	** 322
	{
/*ccname*/	_WT("置可视状态"),
/*egname*/	_WT("SetVisible"),
/*explain*/	_WT("设置菜单项选中"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_BOOL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/2,
/*arg lp*/	&s_ArgInfo[149],
	},
//****** 菜单模板->是否启用（成员）	** 323
	{
/*ccname*/	_WT("是否启用"),
/*egname*/	_WT("IsEnabled"),
/*explain*/	_WT("判断是否菜单项启用"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_BOOL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/1,
/*arg lp*/	&s_ArgInfo[151],
	},
//****** 菜单模板->置选中（成员）	** 324
	{
/*ccname*/	_WT("置启用状态"),
/*egname*/	_WT("SetEnabled"),
/*explain*/	_WT("设置菜单项启用"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		SDT_BOOL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/2,
/*arg lp*/	&s_ArgInfo[152],
	},
//****** AuthCallback->构造函数（成员）	** 325
	{
/*ccname*/	_WT("构造函数"),
/*egname*/	_WT("consturct"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_CONSTURCT_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** AuthCallback->析构函数（成员）	** 326
	{
/*ccname*/	_WT("析构函数"),
/*egname*/	_WT("free"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_FREE_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** AuthCallback->复制函数（成员）	** 327
	{
/*ccname*/	_WT("复制函数"),
/*egname*/	_WT("copy"),
/*explain*/	_WT(""),
/*category*/-1,
/*state*/	CT_IS_HIDED|CT_IS_OBJ_COPY_CMD,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星领航员->CEF启动消息循环（成员）	** 328
	{
/*ccname*/	_WT("启动CEF消息循环"),
/*egname*/	_WT("CefRunMessageLoop"),
/*explain*/	_WT("启动CEF消息循环(测试)"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
//****** 水星领航员->CEF退出消息循环（成员）	** 329
	{
/*ccname*/	_WT("退出CEF消息循环"),
/*egname*/	_WT("CefQuitMessageLoop"),
/*explain*/	_WT("退出CEF消息循环(测试)"),
/*category*/-1,
/*state*/	NULL,
/*ret*/		_SDT_NULL,
/*reserved*/0,
/*level*/	LVL_SIMPLE,
/*bmp inx*/	0,
/*bmp num*/	0,
/*ArgCount*/0,
/*arg lp*/	NULL,
	},
};

#endif
#endif